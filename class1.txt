Q. What is the purpose of learning programming language?
Ans: 
	to talk with computer
	s/w develop
	application

- different types of application we develop in java?

Network application: these application are used in client/ server environment.
	these are mainly used in Org. where data has to be referred / shared with others.
	eg: banking s/w
		insurance s/w

Web application: these application are used in internet 
	eg: All website(Web application)

Desktop application: these application are used in local system only.
	eg: Notepad, office, tools, .....
	Billing S/W

mobile application: These application are used in mobile.
	Ex: all mobile apps.

Device Application: these application are used for activation of electronic devices.
	Ex: Device Drivers.
to develop these all types of applications use java, dotnet..... are useful.


what is java?
it is a general purpose and object oriented programming language used to develop different types of applications. 

3 section in java
- core java - j2se - java 2 standard edition
	all the language funda's
- adv. Java - J2EE - Java 2 Enterprise edition 
	it is meant for developing application.
- J2ME - Java 2 Micro Edition
	it is meant for developing Mobile application

latest stable version of java: 21 LTS

all java update/s/w can be downloaded from Oracle

For learning any programming language:-
Tokens: variables, constants, keywords, operators.
Data Type:

------------------------------------------------------
# class 2


variables: It is named memory location to store values temply.
	these are having a facility to modify values whenever required.

rules for naming:- 
- name must be one word
- it should start with either alphabet / _ (underscore)
- name must have alphanumeric.

constants: These are one type of variable which will not allow to modify it's value once it is assigned.

keywords: These are the reserved words of the programming language which is having specific action/ meaning.

java has 50+ keywords: char, byte, int, short, double, long, float, if, else, while, for, case.

Data Type:- 
Primitive: provided by the programming language
	Number based: all the numbers can grouped by dividing into two parts
		Integer:- all the whole numbers
			keywords: byte, short, int, long
		decimal:- Numbers having decimal portion
			keywords: float, double
		
	Text bases: all character is called as text/string.
		these are 2 types:
		character: either single alphabet/ single digit/ single symbol
		characters enclosed in single quotes ('  ')
			keyword: char
		string:- Collection of characters
			values are enclosed in ("  ")

	Boolean: it allows us only 2 values true/ false
		keyword: boolean
		

Non Primitive (user defined): these are created and used by the developer
	keywords: enum, class, array, interface ......

download and install java
eclips idle


structure java:

importing package

class <Classname>
{
	public static void main(String [] args)
	{
		body of the program
	}
}

---------------------------------------------------

class 3 notes
function is used to solve a task.
function is predefined world which has specific action. 
it predefined instruction to perform any task. 
these instruction will be written in a specific files called as library.

c, cpp library files are called as header files.
#inclued conio.h
#include stdio.h

in java these are called as package.

1. packages: these are the library files for the java
	usually a package is called as set of classes. and a class is consist of set of functions.

import "package name"

import java.io.*; //* represents all classes.
import java.io.Console; //import a specific class.

java.sql, java.lang, java.util ......

2. Every java program start with "class" and identified by a class name.

3. main():- the program execution starts with the main() method.

4. void:- it specify that main() is not returning any value.

5. static:- while calling a method to avoid object, than method starts with static.

6. public:- to access class members outside the class, we use public.

7. String[] args:- which explains in a concept of "command line arguments"l

once method/function is created, to get output of that function we have to call that function in other function. 
main() method will be called by the compiler.

output statements:
	System.out.println():- it is use to print statement / variable value line by line
	System.out.print():- it is use to print statement / variable value side by side.


notepad: first compile it (javac projectname.java)
	second just run the java program(java projectname.java)


-----------------------------------------------

Class 4
How to create a variable?
	<data type> <variable name> [=<value>]
		<...> = must be used 
		[...] = optional (may or may not)

	int x = 100; [right to left]
for every variable, following properties are existed.
	- Name
	- value
	- address
	- Capacity(min val - max value)
	- size of memory

	eg: int x = 100;
	float y = 12.45;
	char ch = 'A'

when ever you are using float data type use f at the end of the value. because it is treating it as double type.

How to create a constant variable?
	final <data type> <variable name> = <value>;
	
eg: final float pi= 3.14;


Operator:- there are the symbols which has some action b/w operands.

c=a+b
operand= the value on which operation is performed. (a,b,c)
operators= the symbol that is used to perform the operation (=, +)

Arithematic operator: these are used to perform mathemaical calculation.
+(add), -(minus), *(multiplicaion), /(division), %(div- remainder)

Relational Operators:  These are used to check the condition.
>,<,>=,<=,!=(not equals), ==(equals)
Note: the answer always going to be in bool value  (True/Fales)

Logical Operators: These are used b/w conditions when multiple conditions are checking.
Note: the answer always going to be in bool value  (True/Fales)
&& (AND): All condition must be true.
|| (OR):  any one condition must be true.
!  (NOT): if condition is true it returns false and vice versa.

AND Truth Table

A	B	R
T	T	T
T	F	F
F	T	F
F	F	F


OR Truth Table
A	B	R
T	T	T
T	F	T
F	T	T
F	F	F		

NOT truth table
A	R
T	F
F	T


Assignment Operators: These are used to assign value to the variable / results of expressions are also assigned variables.

=(Assigning values) +=, -=, /=, *=, %=

int x=10;
int y=20;

x=y // x and y are value 20
y=x // x and y are value 10

int z = x+y; // z value is 30

x=x+10; // mathematical equation
x+=10; // prog equation

Unary Operators: these are used to increase / decrease value by 1.
	++ increase / increment by 1
	-- decrease / decrement by 1
x = x+1 (or) x++ 
x = x-1 (or) x--

classified into 2 type
- pre increment: ++x (first increase/decrease then print)
- post increment: x-- (fist print then increase/decrease)

int x=10;
int y= x++;
sysout(y);
----------------------------------------
class 4

conditional operator: These are used to check conditions.
? :
	(<condition> ? <true>:<false>)

concatenation operator: these are used to concatenate any to stings or trying with other values.
+  = for concatenation two string 

JDK JVM and JRE

JDK = jvm + jre (combination of development tools and the set of library)

JRE: Java Runtime Environment
It will provide run time environment for java programs based on type of application.
	ie. provide library for the program

JVM: Java Virtual Machine
	it is an execution engine for java, it will take care entire program execution JVM basically consist of different operating systems to provide environment.

OS:
windows
Unix
Linux
mac os
android


Type casting or Type conversion:
the process of converting values from one data type to another data type.

two type of type casting
- implicit: here converting process will be taken from lower data type to higher data type.
	double -> long -> float -> int -> short -> byte

- explicit: here converting process with be taken from higher data type to lower data type.
	here we have to write addition statements to convert values.

how to input values dynamically:

Scanner Class: this class is used to input values into variable dynamically(at the time of program execution).

- import java.util.Scanner package at the top of the program.
- Create object for the scanner class as follows within the main()
	Scanner <object> = new Scanner(System.in)
	System.in => represents Keyboard.
- read values into different data type.
	byte = nextByte()
	short = nextShort()
int = nextInt()
long = nextLong()
float = nextFloat()
double = nextDouble()
char = nextCharacter()
String = next() / nextLine()
syntax
variable = object.methodName()

Calculate Area of circle : Area = PI*r*r
PI = 3.14  (use it as constant)
r that should be taken by user

-----------------------------------------
class 4

Control statements
these are the statements used to control the flow of program execution.
	- Conditional
	- Branching
	- Looping

Conditional: These are used check condition based on condition True/false some statements will be executed.
"if" statement is used to check condition.

simple if:
------------
if(condition)
{
	set of statements
}		


If-Else-
-------
if(condition)
{
	set of statements
}
else
{
	set of statement
}

// accept a number and check is it +ve or -ve


else-if
-------
if(condition)
{
	set of statements
}
else if(cond-2)
{
	set of statement
}
------------
--------------
--------------
---------
[else
{
	set of default statement
}]



Nested if
-----------
a if condition within another if condition.

if(condi-1)
{
	if(condi-2)
	{
		----------
	}
}

//Accept person age and gender, then check marriage eligibility
// male: age>= 21 and gender=male
// female: age >=18 and gender = female


equal("male") = male (correct)   Male (wrong)
equalsIgnoreCase("Male")  = male(correct)   Male(correct)  MALE(correct)
	MaLE(correct)


---------------------------------------
Class 5

Branching Statements: (Switch case statement)
This is used to check multiple conditions on single variable whether values is equal or not.	

switch(variable)
{
	case <vale-1>:
		set of stmts
		break;
	case <val -2>:
		set of stmts
		break;
	-------
	--------
	--------
	default:
		set of stmt
		break;
}

you can use the read() for taking the input just a char and return it's ascii value
exception raise.

Loops:- the process of repeating a task for n number of times.
if condition is true it will continue the loop once false it will end the loop.
- while loop
- do while loop
- for loop
- foreach

while loop: this loop repeats its task until the given condition is true.

variable inital value
while(condition){
	set of stmt
	increment/decrement operator 
} 

Note: for any loop we need separate variable(initial value, condition, termination).


H/W:
1: accept the number then print it's factorial value
	// 5!=5x4x3x2x1 = 120

2: Accept the number then print it's reverse number
	// 123 = 321


--------------------------------------------------------
Class 8
For loop:- it is same as while loop but initialization, condition and iteration comes in a single line.

for(initialization; condition; iteration)
{
	set of statements
}

H.W
1. Accept the number then print it's reverse number
	// 123 = 321


do-while loop: it is also as same as while loop but condition will be checked at the end of the loop.

variable initial value
do
{
	set of stmt
	increment/decrement
}
while(condition);

NOTE: if condition is false for the first time, while loop rotate task 0 times whereas do while rotates one time.

------------------------------------------------
class 9:
- Nested loop
a loop within another loop is called as nested loop.
Purpose: To repeat looping process for n number of time.
  
H.W

1 0 0
0 1 0
0 0 1
------------
5 4 3 2 1
4 3 2 1
3 2 1
2 1
1
------------
1
1 2
1 2 3
1 2 3 4
1 2 3
1 2
1
-------------
1 2 3 4
1 2 3
1 2
1
1 2
1 2 3
1 2 3 4
-----------------
print all prime numbers b/w 1-100
----------------------------------------------------

Arrays:-
It is a variable which allows to store multiple value of specific data type. (Same type of data)

Types of array: (array are of 3 types)
- single dimensional array
- Double/ 2d /multi dimensional array
- Jagged Array

Single Dimensional Array: the process of arranging values either in single row / single column.

initialization process: <data type> <variable>[] = {val1, val2, ....}
	int x[] = {10,20,30,40,50,60};

Array provide to access each value, some numeric values called as index.
	index starts from 0,1,2,3.....

	arrayname[index] = to get value / to set new value

	dynamic process: <data type> <variable>[] = new <data type>[size];
		int x[] = new int[5];

-----------------------------------------------
class 10

Double dimensional array: the process of arranging the values in no of rows and no of columns. 

1 2 3 
4 5 6
7 8 9

Initialization process:-
	<data type> <variable>[][] = {{val1,val2},{val1,val2},......};
	int x[][]={{10,20,30},{40,50,60}};

index always starts from 0

arryname[row index][col index] = to get value/ to set value
	x[0][0] = 10
	x[0][1] = 20
	x[0][2] = 30

	x[1][0] = 40
	x[1][1] = 50
	x[1][2] = 60


Dynamic process
	<data type> <var> [][] = new <dataType> [row][col];
	int x[][] = new int [3][3];

--------------------------------------
Class 11

Jagged Array: this is one type of multi dimensional array but here no of rows are fixed and in every row different no of columns are exist.

<data type>[] <var>[]={{v1,v2,v3...},{v4,v5,.....},{..}.......};
int x[][] = {{10,20,30},{40,50},{60,70,80,90}};

Here also maintains index numrs but each row and col having index no starting from 0,1,2,3,....

Dynamic process
	<data type> <var>[][] = new <data type> [row][];
for column specific
	var[row size] = new <data type>[no of col];

it has to repat for n number of row
	int x[][] = new int [3][];
	x[0]=new int [3];
	x[1]=new int [4];
	x[2]=new int [2];


H.W
- Accept values in 3x3 matrix then print it's transpose matrix
row will become col 
col will become row

- Write a program to extract all even number from double dimensional array, then add those values into single dimensional array, then print

- write a program to multiply the matrix

String:- It is a collection of characters/ Array of characters.
- string should always enclosed with in double quotes (" ")
- To declare string var "String" class is used.
- String class is an immutable class. The value assigned in string variables can not be modified.
- characters nothing but an alphabet/ a digit/ a symbol.
- String value ends with null(\0) value.

String <var> = "value";
String str = "java";
String adrs= "Door no: 607, abc soc";

String Functions:- 
- toUpperCase() : it coverts string into upper case letter
- toLowerCase() : it coverts string into lower case letter
- length(): to count no of char into a string.
- charAt(index) : it will print a character from string based on index number.

---------------------------------
Class 12

- equal():- it check given 2 string are same or not.
- equalIgnoreCase():- it is as same as equal() but it ignores case sensitive.
- compareTo():- it allows use to compare two string to find which is big/small/equals.
	fist string bigger than second string return >0
	fist string small than second string return < 0
	if values are same return 0
- compareToIgnoreCase():- same as compareTo() but it ignore the case sensitive.
- concat():- concatenate two string
- contains():- search a substring within the string.

HW
- count the following items from string
	no of alphabets
	no of digits
	no of symbols
	no of space

User defined methods / Function:- 
	every programming language is a function base language
2 type of functions
- pre-defined: these function are given by the prog. language.
- user defined: these function are created and used by the developer/ user as per the requirement.

Purpose of user defined method/functions.
- to avoid the complexity of the program
- to implement the OOPs programming
- Reusability of code.

2 steps to define methods
1. Method Define: process of creating a method with a task.
	<return type> <method name>([arguments]){
		body of the method
	}
- Methods name must be only one word.
- arguments are the var which receives values at the time of calling a method.
	these are may or may not have methods.
	a method can take any number of arguments.
- return type is a type where a method is providing final result of the method process.
methods won't return any value, at that time method starts with "void" keyword.

NOTE:- A function can be defined either above/ below of the main() method.

4 ways of defining the function 
- without argument and without return type
	void Sample(){
		............
	}
- with argument and without return type
	void Sample(int x, float y){
		...............
	}
- with argument and with return type
	float Sample(int x, float y){	
		..........
		return <expression/value>
	}
- without argument and with return type
	int Sample(){
		...........
	}

2. Method calling
	method_name([arguments value]);

	a function called with in another function 
	usually main() method.

-----------------------------------------------
class 12
Objects
class
types of members
constructors
Object Oriented Programming Structure(OOPs)
it is a programming methodology / Architecture where it provides security for the data.

before OOPS there was a methodology, which is called as Procedural oriented programming structure(POPS)
importance is how to solve the problems.
Eg: pops: 'C' Lang.

OOPS Concepts:- 
object
class
abstraction
encapsulation
inheritance
polymorphism 

Object:- it a thing in the real world which as some properties and some actions.

eg:- mobile is a object
	Properties:
		size, color, model, company, .....
	Actions/behavior:
		Make call, surfing internet, .....

Note: Every object is an instance of their parent unit.


class:- it is blueprint for an object.
		or
	it is an template of an object.

it is an encapsulated cell which meant for defining properties and functions of an object.

class <ClassName>
{
	var declare
	methods define
}

--------------------------------------------
class 14

how to create the class? -- done
how to create object? -- done

Access Modifiers:-
These are the keywords which specifies how to access class members either inside and outside the class.

Private: it allows to access class members only inside the class.

Public: it allows to access class members inside and outside the class
	by default class members are public.

Protected: it allows to access class members into another specific class.

Type of class members:

There 2 type of members
- non-static members: binded with class object. ie. memory of non static members is inside the object.
	it gives multiple copies of data.

- static member:
a. static method can handle static variable only.
b. static method can be called with the help of class name.


Constructors:- special methods of class, which has same name as class.

Purpose: is to specify initial process of an object. 

every class is having a default constructor, which is invisible.
public classname([prara maeters]){
	body of constructor
}

- It will be called automatically whenever the object is created.
- it can take parameter, for parameters we have pass values at the time of object creation.
- no return type.
- a class can have multiple constructors, but the parameters should be different.

"this" Keyword:- it separate class variable and parameters variable when both variable name are same.

-------------------------------

Class 15
Getters and setters
These are the special methods to access a class private var outside the class.

setter methos are used to assign value to the var and if required we can also do it for validating for that input.

void setVarName(argument){
	this.instance var = arg var
}

get methods are used to return values from the var

<return type> getVarName(){
	return <varName>;
}

For Naming convention 
	String sname;
	void setSname(String sname)
	{
		this.sname= sname;
	}

	String getSname()
	{
		return sname;
	}

-----------------------------------------
class 16 
4 major pilers of OOPs
- Inheritance
- Abstraction 
- Polymorphism 
- Encapsulation

Inheritance: it is a process of getting features from existing item to new item.

purpose:- increase the reusability of classes.

existing item is called as parent
new item is called as child

Parent - Base - Super
Child - Derived - Sub

Note: inheritance always will be done from parent to child.

class <child class> extends <parent class>
{
	---------
	body of program
}

1. As per inheritance no need to create any object for parent class, just create an object for child class then call parent class method and child class method with child class object.

2. To activate parent class data into child class "protected" access Specifier has to be used while declaring var in parent class.


Type of Inheritance:- 
- Single
- Multi level
- Multiple
- Hierarchical
- Hybrid 

Constructors in Inheritance:
- a parent class constructors will be executed with the help of child class object.
- both parent and child class constructors are executed with the help of child class object if those constructors are not having any argument.
- if both parents and child constructors are having parameters, then call the parent class constructor in child class constructor by using "super()"

super() :- it will call parent constructor into child class constructor when those cons are having argument.

-----------------------------------------
class 17
# Student Details - Constructor
Create a class Student with the private attributes
- int studentId
- String studentName, studentAddress, collegeName. 

Include appropriate getter and setter methods.
Write 2 constructors for the Student class based on the below assumptions. 
Assume most of the students are from “NIT” college. So user has to give input whether the student is from NIT or not. 

If student belongs to NIT, give input as 'yes/YES' and  skip input for the attribute collegeName  and create student object with 3-argument constructor to initilze the values for studentId, studentName and studentAddress and  collegeName as “NIT”.

If student belongs to other college, give input as 'no/NO' and get college name from the user and create student object with 4-argument constructor to initialize all the values. 

Instead of Yes / No, if user enters different input then display 'Wrong Input' and get the input again.
Based on the above assumptions write the necessary constructors in the Student class.

Write a class StudentMain with the main method and test the application. 

Get all the input needed from the main method. 

> Sample Input 1:

    Enter Student's Id:
    12
    Enter Student's Name:
    John
    Enter Student's address:
    Chennai
    Whether the student is from NIT(Yes/No):
    NO
    Enter the college name:
    SVS

> Sample Output 1:

    Student id:12
    Student name:John
    Address:Chennai
    College name:SVS

---

> Sample Input 2:

    Enter Student's Id:
    43
    Enter Student's Name:
    Tom
    Enter Student's address:
    Coimbatore
    Whether the student is from NIT(Yes/No):
    y
    Wrong Input
    Whether the student is from NIT(Yes/No):
    yes

> Sample Output 2:

    Student id:43
    Student name:Tom
    Address:Coimbatore
    College name:NIT

Problem 2

# Ticket Price Calculation - Static

Create a class Ticket with the following private variables

- int ticketid;
- int price;
- static int availableTickets;

Include getters and setters methods in the Ticket class.

AvailableTickets should hold only positive value. Zero and negative values are not allowed.(This logic should be checked inside the corresponding setter method)

Write the following method in the Ticket class:

`public int calculateTicketCost(int nooftickets)` — this method should check the ticket availability, If the tickets are available, reduce the nooftickets from availableTickets and calculate the total amount as nooftickets*price  and return the total amount.  If the tickets are not available, this method should return -1.

Write a main method in the Main class to test the application.

> Sample input and output

    Enter no of bookings:
    2
    Enter the available tickets:
    25
    Enter the ticketid:
    123
    Enter the price:
    100
    Enter the no of tickets:
    5
    Available tickets: 25
    Total amount:500
    Available ticket after booking:20
    Enter the ticketid:
    124
    Enter the price:
    100
    Enter the no of tickets:
    2
    Available tickets: 20
    Total amount:200
    Available ticket after booking:18
====================================

problem 3
# Average and Grade Calculation

Develop a smart application as Student Grade Calculator(SGC).

Create a class Student with following private attribute :

int id, String name, marks(integer array), float average and char grade. Include appropriate getters and setters methods and constructor.

`public  void calculateAvg()`- This method should calculate average and set average mark for the current student.

`public void findGrade()`- This method should set the grade based on the average calculated. If the average is between 80 and 100 then, then return grade as 'O', else 'A' .If the student gets less than 50 in any of the subjects then return grade as 'F'. Using appropriate setter method set the grade to the student.

(Note : number of subject should be greater than zero, if not display as 'Invalid number of subject' and get number of subject again, Assume mark for a subject should be in the range 0 - 100.  If not display a message "Invalid Mark" and get the mark again)

Write a class StudentMain and write the main method.

In this class, write a method

`public static Student getStudentDetails()` - this method should get the input from the user for a student, create a student object with those details and return that object.


In main create student’s object by invoking the getStudentDetails method.  Also calculate average and grade for that student object using appropriate methods.

SGC app should get the input and display the output as specified in the snapshot:

> Sample Input 1:

    Enter the id:
    123
    Enter the name:
    Tom
    Enter the no of subjects:
    3
    Enter mark for subject 1:
    95
    Enter mark for subject 2:
    80
    Enter mark for subject 3:
    75

> Sample Output 1:

    Id:123
    Name:Tom
    Average:83.33
    Grade:O

---

> Sample Input 2:

    Enter the id:
    123
    Enter the name:
    Tom
    Enter the no of subjects:
    0
    Invalid number of subject
    Enter the no of subjects:
    3
    Enter mark for subject 1:
    75
    Enter mark for subject 2:
    49
    Enter mark for subject 3:
    90

> Sample Output 2:

    Id:123
    Name:Tom
    Average:71.33
    Grade:F

=============================

problem 4

# Employee Salary Calculation

Create a class Employee with the following private member variables.

- int employeeId
- String employeeName
- double salary
- double netSalary

Include appropriate getters and setters method in Employee class. Write the following method in the Employee class:

`public void calculateNetSalary(int pfpercentage)`  - This method should take PF percentage as argument. Deduct the PF amount from the salary and set the netSalary.  

Create a Main class which has the main method which invokes the method to get the input and prints the details as shown in the sample. 

Also write a method :

- `public static Employee getEmployeeDetails()` -  which gets the employee details - id, name and salary, and returns the employee object.

- `public static int getPFPercentage()` -  which gets the PF percentage and returns the same

In the main method invoke the above two methods, and then call the calculateNetSalary method in Employee class and print the output as shown below.

> Sample Input 1:

    Enter Id:
    101
    Enter Name:
    Vivek
    Enter salary:
    20000
    Enter PF percentage:
    7

> Sample Output 1:

    Id : 101
    Name : Vivek
    Salary : 20000.0
    Net Salary : 18600.0
-----------------------------------------
class 18
Abstraction: process of hiding the internal implementation details and only display the essential features of an object.
most focus on what an object does not on how it is done.

class which is declaed with abstract keyword is know as abstract class.
it has some abstract and non abstract method (methods with the body).

Data abstraction: process of hiding the implementation details and showing only functionalities to the user.

Ways to achieve the abstraction
we can do in 2 different ways
- Abstract class (0 to 100%)
- Interface (100%)

Abstract class
- a class which is declared as abstract class
- it has abstract and non abstract methods
- it need to be executed and its methods implemented.
- it can not be inherited.

abstract class demo{
	abstract methods (only declaration of the methods)
	not abstract methods (methods having definition-concrete methods)
}

points to remember:
- class must be declared with an abstract keyword.
- it has abstract and non abstract methods
- it cannot be instantiated.
- it can have contractors and static methos


Note: Every abstract class is a parent class in inheritance.

Abstract methos: 
the methods which is declared as abstract and does not have implementation is knows as abstract methods.

one abstract method can have multiple actions in their child class.

Interface: it is one type of class where it allows only declaration of methods and variables.
it is also called as pure abstract class.

Purpose:-
- to achieve the full abstraction.
- to achieve multiple inheritance.
- Loosly coupling

interface <iface name>
{
	method declaration
	variable declaration
}

Note:- 
- it cannot be instantiated(objects cannot be created)
- By using "implements" keyword we have to inherit interface to the class.
- A class can inherit any no of interfaces.
- declared method in interface will have definition on child class.

class <class name> implements <interface1,interface2,.........>{
	............
}


















